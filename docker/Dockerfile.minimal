# Minimal Dockerfile with essential packages only
FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Set environment to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Update package list and install minimal required packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3-opencv \
    tesseract-ocr \
    tesseract-ocr-eng \
    ffmpeg \
    curl \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .

# Create a minimal requirements file for Docker
RUN echo "Flask==2.3.3" > requirements_docker.txt && \
    echo "Werkzeug==2.3.7" >> requirements_docker.txt && \
    echo "numpy==1.24.3" >> requirements_docker.txt && \
    echo "pytesseract==0.3.10" >> requirements_docker.txt && \
    echo "Pillow==10.0.0" >> requirements_docker.txt && \
    echo "requests==2.31.0" >> requirements_docker.txt && \
    echo "gpxpy==1.5.0" >> requirements_docker.txt && \
    echo "pynmea2==1.19.0" >> requirements_docker.txt

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements_docker.txt

# Try to install OpenCV, if it fails, use the system package
RUN pip install --no-cache-dir opencv-python-headless==4.8.1.78 || \
    echo "Using system OpenCV package"

# Copy source code
COPY . .

# Create necessary directories
RUN mkdir -p /tmp/uploads /tmp/results

# Expose port
EXPOSE 5000

# Set environment variables
ENV FLASK_APP=pothole_api.py
ENV FLASK_ENV=production
ENV PYTHONPATH=/app
ENV OPENCV_LOG_LEVEL=ERROR

# Run the application
CMD ["python", "pothole_api.py"]
